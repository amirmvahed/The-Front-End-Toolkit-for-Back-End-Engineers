{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"variables\">Variables</h1>\n<p>Variables are fundamental to programming. In JavaScript, variables act like containers that store data values. Imagine\nthem as labeled boxes in which you can keep different pieces of information, whether that’s a number, a string of text,\nor more complex data types. This allows you to store, manipulate, and reuse data throughout your code.</p>\n<h2 id=\"declaring-variables\">Declaring Variables</h2>\n<p>To declare a variable in JavaScript, you can use <code>var</code>, <code>let</code>, or <code>const</code>. Each of these keywords has its specific use\ncases:</p>\n<ol>\n<li><strong><code>var</code>:</strong> This is the traditional way to declare variables. However, it&#39;s less commonly used in modern JavaScript\nbecause it has some quirks regarding scope and hoisting.</li>\n<li><strong><code>let</code>:</strong> Introduced in ES6 (ECMAScript 2015), <code>let</code> is now the preferred way to declare variables that might change\ntheir\nvalue over time. It has block-level scope, meaning it&#39;s only accessible within the block where it’s defined.</li>\n<li><strong><code>const</code>:</strong> Also introduced in ES6, <code>const</code> is used to declare variables that shouldn’t change. Once you assign a\nvalue\nto a const variable, it can’t be reassigned.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> myVar = <span class=\"hljs-string\">&quot;Hello, world!&quot;</span>; <span class=\"hljs-comment\">// Using var</span>\n<span class=\"hljs-keyword\">let</span> myLet = <span class=\"hljs-number\">42</span>;              <span class=\"hljs-comment\">// Using let</span>\n<span class=\"hljs-keyword\">const</span> myConst = <span class=\"hljs-number\">3.14</span>;        <span class=\"hljs-comment\">// Using const</span>\n</code></pre>\n<ul>\n<li><strong>myVar:</strong> This variable is declared with var and can be updated or redeclared within its scope.</li>\n<li><strong>myLet:</strong> This variable is declared with let and can be updated but not redeclared within the same scope.</li>\n<li><strong>myConst:</strong> This variable is declared with const and cannot be updated or redeclared.</li>\n</ul>\n<h2 id=\"variable-scope\">Variable Scope</h2>\n<p>Scope refers to where a variable is accessible within your code. There are mainly two types of scope in JavaScript:</p>\n<ol>\n<li><strong>Global Scope:</strong> If you declare a variable outside any function, it’s in the global scope and can be accessed\nanywhere in your code.</li>\n<li><strong>Local (Block) Scope:</strong> If you declare a variable inside a function, it’s only accessible within that function or\nblock.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> globalVar = <span class=\"hljs-string\">&quot;I am global&quot;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">let</span> localVar = <span class=\"hljs-string\">&quot;I am local&quot;</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(globalVar);  <span class=\"hljs-comment\">// Accessible</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(localVar);   <span class=\"hljs-comment\">// Accessible</span>\n}\n\n<span class=\"hljs-title function_\">myFunction</span>();\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(globalVar);  <span class=\"hljs-comment\">// Accessible</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(localVar);   <span class=\"hljs-comment\">// Error: localVar is not defined</span>\n</code></pre>\n<p>In this example, <code>globalVar</code> is accessible everywhere, but <code>localVar</code> only exists within myFunction.</p>\n<h2 id=\"variable-naming-rules\">Variable Naming Rules</h2>\n<p>When naming your variables, follow these guidelines:</p>\n<ul>\n<li>Names can contain letters, digits, underscores (_), and dollar signs ($).</li>\n<li>Names must begin with a letter, underscore, or dollar sign.</li>\n<li>Names are case-sensitive (myVar and myvar are different).</li>\n<li>Names cannot be reserved keywords (e.g., let, class, return, function).</li>\n</ul>\n<h2 id=\"best-practices-for-variable-naming\">Best Practices for Variable Naming</h2>\n<ul>\n<li><strong>Use descriptive names:</strong> Instead of x, y, or z, use names like userName, totalAmount, or isComplete.</li>\n<li><strong>Camel case convention:</strong> Start with a lowercase letter and capitalize subsequent words, e.g., userScore or firstName.</li>\n<li><strong>Avoid short, unclear names:</strong> Short names like a, b, or c should be avoided unless in loops or very limited contexts.</li>\n</ul>\n","markdown":"# Variables\n\nVariables are fundamental to programming. In JavaScript, variables act like containers that store data values. Imagine\nthem as labeled boxes in which you can keep different pieces of information, whether that’s a number, a string of text,\nor more complex data types. This allows you to store, manipulate, and reuse data throughout your code.\n\n## Declaring Variables\n\nTo declare a variable in JavaScript, you can use `var`, `let`, or `const`. Each of these keywords has its specific use\ncases:\n\n1. **`var`:** This is the traditional way to declare variables. However, it's less commonly used in modern JavaScript\n   because it has some quirks regarding scope and hoisting.\n2. **`let`:** Introduced in ES6 (ECMAScript 2015), `let` is now the preferred way to declare variables that might change\n   their\n   value over time. It has block-level scope, meaning it's only accessible within the block where it’s defined.\n3. **`const`:** Also introduced in ES6, `const` is used to declare variables that shouldn’t change. Once you assign a\n   value\n   to a const variable, it can’t be reassigned.\n\n```js\nvar myVar = \"Hello, world!\"; // Using var\nlet myLet = 42;              // Using let\nconst myConst = 3.14;        // Using const\n```\n\n* **myVar:** This variable is declared with var and can be updated or redeclared within its scope.\n* **myLet:** This variable is declared with let and can be updated but not redeclared within the same scope.\n* **myConst:** This variable is declared with const and cannot be updated or redeclared.\n\n## Variable Scope\n\nScope refers to where a variable is accessible within your code. There are mainly two types of scope in JavaScript:\n\n1. **Global Scope:** If you declare a variable outside any function, it’s in the global scope and can be accessed\n   anywhere in your code.\n2. **Local (Block) Scope:** If you declare a variable inside a function, it’s only accessible within that function or\n   block.\n\n```js\nlet globalVar = \"I am global\";\n\nfunction myFunction() {\n  let localVar = \"I am local\";\n  console.log(globalVar);  // Accessible\n  console.log(localVar);   // Accessible\n}\n\nmyFunction();\n\nconsole.log(globalVar);  // Accessible\nconsole.log(localVar);   // Error: localVar is not defined\n```\n\nIn this example, `globalVar` is accessible everywhere, but `localVar` only exists within myFunction.\n\n## Variable Naming Rules\nWhen naming your variables, follow these guidelines:\n\n* Names can contain letters, digits, underscores (_), and dollar signs ($).\n* Names must begin with a letter, underscore, or dollar sign.\n* Names are case-sensitive (myVar and myvar are different).\n* Names cannot be reserved keywords (e.g., let, class, return, function).\n\n## Best Practices for Variable Naming\n\n* **Use descriptive names:** Instead of x, y, or z, use names like userName, totalAmount, or isComplete.\n* **Camel case convention:** Start with a lowercase letter and capitalize subsequent words, e.g., userScore or firstName.\n* **Avoid short, unclear names:** Short names like a, b, or c should be avoided unless in loops or very limited contexts.","slug":"variables","title":"Variables","section":"JavaScript","icon":"wrench","filePath":"/home/runner/work/front-end-for-back-end-engineers/front-end-for-back-end-engineers/lessons/04-JavaScript/C-variables.md","nextSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/data-types","prevSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/adding-js-to-a-page"}},"__N_SSG":true}