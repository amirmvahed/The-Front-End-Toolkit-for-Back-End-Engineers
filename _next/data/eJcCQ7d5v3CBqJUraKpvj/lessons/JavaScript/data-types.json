{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"data-types\">Data Types</h1>\n<p>JavaScript is a <strong>dynamically typed</strong> language, meaning you don&#39;t have to specify the data type of a variable when you\ndeclare it. The data type is determined automatically based on the value assigned to the variable.</p>\n<p>JavaScript has several basic data types that you’ll use frequently:</p>\n<h2 id=\"string\">String</h2>\n<p>Represents text data. Strings are sequences of characters enclosed in single quotes (&#39;), double quotes (&quot;), or\nbackticks (`).</p>\n<pre><code class=\"language-js\">let greeting = &quot;Hello, world!&quot;;\nlet anotherGreeting = &quot;Hi there!&quot;;\nlet templateString = `Today is ${new Date().toDateString()}`;\n</code></pre>\n<h2 id=\"number\">Number</h2>\n<p>Represents numeric data, including integers and floating-point numbers (decimals).</p>\n<pre><code class=\"language-js\">let age = 25;       // Integer\nlet price = 19.99;  // Floating-point number\nlet largeNumber = 1e6; // Exponential notation (1 million)\n</code></pre>\n<h2 id=\"boolean\">Boolean</h2>\n<p>Represents a logical value and can be either <code>true</code> or <code>false</code>. Booleans are typically used in conditions and loops to\ncontrol the flow of your program.</p>\n<pre><code class=\"language-js\">let isLoggedIn = true;\nlet hasPermission = false;\n</code></pre>\n<h2 id=\"undefined\">Undefined</h2>\n<p>A variable that has been declared but not assigned a value has the type <code>undefined</code>.</p>\n<pre><code class=\"language-js\">let notAssigned;\nconsole.log(notAssigned); // Output: undefined\n</code></pre>\n<h2 id=\"null\">Null</h2>\n<p>Represents the intentional absence of any object value. It is often used to indicate that a variable should be empty.</p>\n<pre><code class=\"language-js\">let emptyValue = null;\n</code></pre>\n<blockquote>\n<p><strong>Undefined vs. Null:</strong></p>\n<p><strong>Undefined:</strong> When a variable is declared but not assigned a value, it has the value undefined.</p>\n<p><strong>Null:</strong> Null is an assignment value that represents &quot;no value&quot; or &quot;nothing.&quot;</p>\n</blockquote>\n<h2 id=\"object\">Object</h2>\n<p>Objects are complex data types that can store collections of data and more complex entities. Arrays, functions, and\nother objects are also considered objects in JavaScript.</p>\n<pre><code class=\"language-js\">let person = {\n  name: &quot;Amir&quot;,\n  age: 30,\n  isEmployed: true\n};\n</code></pre>\n<h2 id=\"array\">Array</h2>\n<p>Arrays are special types of objects used to store multiple values in a single variable. Each item in an array is called\nan element, and it is accessed by its index (position) within the array, starting from 0.</p>\n<pre><code class=\"language-js\">let colors = [&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;];\nconsole.log(colors[0]); // Output: &quot;Red&quot;\nconsole.log(colors[2]); // Output: &quot;Blue&quot;\n</code></pre>\n<p>Some useful methods for Arrays:</p>\n<p><strong>Adding elements:</strong> You can add elements to an array using the push method (adds to the end) or unshift (adds to the\nbeginning).</p>\n<pre><code class=\"language-js\">colors.push(&quot;Yellow&quot;); // Adds &quot;Yellow&quot; to the end\ncolors.unshift(&quot;Purple&quot;); // Adds &quot;Purple&quot; to the beginning\n</code></pre>\n<p><strong>Removing elements:</strong> You can remove elements using the pop method (removes from the end) or shift (removes from the\nbeginning).</p>\n<pre><code class=\"language-js\">colors.pop(); // Removes the last element (&quot;Yellow&quot;)\ncolors.shift(); // Removes the first element (&quot;Purple&quot;)\n</code></pre>\n<p><strong>Looping through an array:</strong> You can loop through the elements of an array using a for loop or the more modern forEach\nmethod.</p>\n<pre><code class=\"language-js\">// Using a for loop\nfor (let i = 0; i &lt; colors.length; i++) {\n  console.log(colors[i]);\n}\n\n// Using forEach\ncolors.forEach(color =&gt; console.log(color));\n</code></pre>\n<p><strong>Checking the length:</strong> The length property returns the number of elements in an array.</p>\n<pre><code class=\"language-js\">console.log(colors.length); // Output: 3\n</code></pre>\n","markdown":"# Data Types\n\nJavaScript is a **dynamically typed** language, meaning you don't have to specify the data type of a variable when you\ndeclare it. The data type is determined automatically based on the value assigned to the variable.\n\nJavaScript has several basic data types that you’ll use frequently:\n\n## String\n\nRepresents text data. Strings are sequences of characters enclosed in single quotes ('), double quotes (\"), or\nbackticks (`).\n\n```js\nlet greeting = \"Hello, world!\";\nlet anotherGreeting = \"Hi there!\";\nlet templateString = `Today is ${new Date().toDateString()}`;\n```\n\n## Number\n\nRepresents numeric data, including integers and floating-point numbers (decimals).\n\n```js\nlet age = 25;       // Integer\nlet price = 19.99;  // Floating-point number\nlet largeNumber = 1e6; // Exponential notation (1 million)\n```\n\n## Boolean\n\nRepresents a logical value and can be either `true` or `false`. Booleans are typically used in conditions and loops to\ncontrol the flow of your program.\n\n```js\nlet isLoggedIn = true;\nlet hasPermission = false;\n```\n\n## Undefined\n\nA variable that has been declared but not assigned a value has the type `undefined`.\n\n```js\nlet notAssigned;\nconsole.log(notAssigned); // Output: undefined\n```\n\n## Null\n\nRepresents the intentional absence of any object value. It is often used to indicate that a variable should be empty.\n\n```js\nlet emptyValue = null;\n```\n\n> **Undefined vs. Null:**\n>\n> **Undefined:** When a variable is declared but not assigned a value, it has the value undefined.\n>\n> **Null:** Null is an assignment value that represents \"no value\" or \"nothing.\"\n\n## Object\n\nObjects are complex data types that can store collections of data and more complex entities. Arrays, functions, and\nother objects are also considered objects in JavaScript.\n\n```js\nlet person = {\n  name: \"Amir\",\n  age: 30,\n  isEmployed: true\n};\n```\n\n## Array\n\nArrays are special types of objects used to store multiple values in a single variable. Each item in an array is called\nan element, and it is accessed by its index (position) within the array, starting from 0.\n\n```js\nlet colors = [\"Red\", \"Green\", \"Blue\"];\nconsole.log(colors[0]); // Output: \"Red\"\nconsole.log(colors[2]); // Output: \"Blue\"\n```\n\nSome useful methods for Arrays:\n\n**Adding elements:** You can add elements to an array using the push method (adds to the end) or unshift (adds to the\nbeginning).\n\n```js\ncolors.push(\"Yellow\"); // Adds \"Yellow\" to the end\ncolors.unshift(\"Purple\"); // Adds \"Purple\" to the beginning\n```\n\n**Removing elements:** You can remove elements using the pop method (removes from the end) or shift (removes from the\nbeginning).\n\n```js\ncolors.pop(); // Removes the last element (\"Yellow\")\ncolors.shift(); // Removes the first element (\"Purple\")\n```\n\n**Looping through an array:** You can loop through the elements of an array using a for loop or the more modern forEach\nmethod.\n\n```js\n// Using a for loop\nfor (let i = 0; i < colors.length; i++) {\n  console.log(colors[i]);\n}\n\n// Using forEach\ncolors.forEach(color => console.log(color));\n```\n\n**Checking the length:** The length property returns the number of elements in an array.\n\n```js\nconsole.log(colors.length); // Output: 3\n```\n","slug":"data-types","title":"Data Types","section":"JavaScript","icon":"wrench","filePath":"/home/runner/work/front-end-for-back-end-engineers/front-end-for-back-end-engineers/lessons/04-JavaScript/D-data-types.md","nextSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/functions","prevSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/variables"}},"__N_SSG":true}