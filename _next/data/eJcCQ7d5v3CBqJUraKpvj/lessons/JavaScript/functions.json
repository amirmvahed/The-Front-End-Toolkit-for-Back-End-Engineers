{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"functions-in-javascript\">Functions in JavaScript</h1>\n<p>Functions are fundamental building blocks in JavaScript. They allow you to group code into reusable blocks that perform\nspecific tasks. Understanding how functions work will help you write modular, maintainable, and efficient code.</p>\n<h2 id=\"function-declarations\">Function Declarations</h2>\n<p>Function declarations define a named function that can be called from anywhere in the code, as long as it appears before\nthe call.</p>\n<pre><code class=\"language-js\">function calculateSum(a, b) {\n  return a + b;\n}\n\nlet result = calculateSum(5, 3);  // Calling the function with arguments 5 and 3\nconsole.log(result);             // Output: 8\n</code></pre>\n<ul>\n<li><strong><code>function calculateSum(a, b)</code></strong>: Declares a function named calculateSum with two parameters a and b.</li>\n<li><strong><code>return a + b</code></strong>: The function returns the sum of a and b.</li>\n</ul>\n<h2 id=\"function-expressions\">Function Expressions</h2>\n<p>Function expressions define a function and assign it to a variable. This type of function is anonymous (i.e., it doesn&#39;t\nhave a name) but can be named if assigned to a variable.</p>\n<pre><code class=\"language-js\">const multiply = function(x, y) {\n  return x * y;\n};\n\nlet result = multiply(4, 5);   // Calling the function with arguments 4 and 5\nconsole.log(result);          // Output: 20\n</code></pre>\n<ul>\n<li><strong><code>const multiply = function(x, y)</code></strong>: Assigns an anonymous function to the variable multiply.</li>\n<li><strong><code>return x * y</code></strong>: The function returns the product of x and y.</li>\n</ul>\n<h2 id=\"arrow-functions\">Arrow Functions</h2>\n<p>Arrow functions provide a shorter syntax for writing function expressions. They are especially useful for simple\noperations.</p>\n<pre><code class=\"language-js\">const divide = (a, b) =&gt; a / b;\n\nlet result = divide(10, 2);   // Calling the function with arguments 10 and 2\nconsole.log(result);         // Output: 5\n</code></pre>\n<ul>\n<li><strong><code>const divide = (a, b) =&gt; a / b</code></strong>: Defines an arrow function that divides a by b and returns the result.</li>\n<li>For functions with a single expression, the curly braces and return keyword can be omitted.</li>\n</ul>\n","markdown":"# Functions in JavaScript\n\nFunctions are fundamental building blocks in JavaScript. They allow you to group code into reusable blocks that perform\nspecific tasks. Understanding how functions work will help you write modular, maintainable, and efficient code.\n\n## Function Declarations\n\nFunction declarations define a named function that can be called from anywhere in the code, as long as it appears before\nthe call.\n\n```js\nfunction calculateSum(a, b) {\n  return a + b;\n}\n\nlet result = calculateSum(5, 3);  // Calling the function with arguments 5 and 3\nconsole.log(result);             // Output: 8\n```\n\n* **`function calculateSum(a, b)`**: Declares a function named calculateSum with two parameters a and b.\n* **`return a + b`**: The function returns the sum of a and b.\n\n## Function Expressions\n\nFunction expressions define a function and assign it to a variable. This type of function is anonymous (i.e., it doesn't\nhave a name) but can be named if assigned to a variable.\n\n```js\nconst multiply = function(x, y) {\n  return x * y;\n};\n\nlet result = multiply(4, 5);   // Calling the function with arguments 4 and 5\nconsole.log(result);          // Output: 20\n```\n\n* **`const multiply = function(x, y)`**: Assigns an anonymous function to the variable multiply.\n* **`return x * y`**: The function returns the product of x and y.\n\n## Arrow Functions\n\nArrow functions provide a shorter syntax for writing function expressions. They are especially useful for simple\noperations.\n\n```js\nconst divide = (a, b) => a / b;\n\nlet result = divide(10, 2);   // Calling the function with arguments 10 and 2\nconsole.log(result);         // Output: 5\n```\n\n* **`const divide = (a, b) => a / b`**: Defines an arrow function that divides a by b and returns the result.\n* For functions with a single expression, the curly braces and return keyword can be omitted.\n","slug":"functions","title":"Functions","section":"JavaScript","icon":"wrench","filePath":"/home/runner/work/front-end-for-back-end-engineers/front-end-for-back-end-engineers/lessons/04-JavaScript/E-functions.md","nextSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/loops","prevSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/data-types"}},"__N_SSG":true}