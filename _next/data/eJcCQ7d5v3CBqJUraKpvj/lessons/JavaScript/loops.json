{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"loops-in-javascript\">Loops in JavaScript</h1>\n<p>JavaScript provides several types of loops, each with its own use cases. The most commonly used loops are for, while,\nand do...while. Additionally, there are special loops like for...in and for...of for iterating over objects and arrays.</p>\n<h2 id=\"the-for-loop\">The <code>for</code> Loop</h2>\n<p>The for loop is one of the most commonly used loops in JavaScript. It runs a block of code a specific number of times,\nbased on a condition.</p>\n<pre><code class=\"language-js\">let fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;];\n\nfor (let i = 0; i &lt; fruits.length; i++) {\n  console.log(fruits[i]);\n}\n</code></pre>\n<p>This loop iterates over the fruits array and prints each fruit name.</p>\n<p><strong>Common Use Case:</strong> Iterating Over Arrays</p>\n<h2 id=\"the-while-loop\">The <code>while</code> Loop</h2>\n<p>The while loop runs as long as a specified condition is true. It is useful when the number of iterations is not known\nahead of time.</p>\n<pre><code class=\"language-js\">let i = 0;\n\nwhile (i &lt; 5) {\n  console.log(&quot;Iteration number: &quot; + i);\n  i++;\n}\n</code></pre>\n<ul>\n<li>The loop continues running as long as this condition is true</li>\n<li>This loop behaves similarly to the for loop example above, but here the loop counter i is defined outside the loop and\nincremented manually inside the loop.</li>\n</ul>\n<h2 id=\"the-forin-loop\">The <code>for...in</code> Loop</h2>\n<p>The for...in loop is used to iterate over the properties of an object. It is primarily used for objects rather than\narrays.</p>\n<pre><code class=\"language-js\">let user = {\n  name: &quot;Amir&quot;,\n  city: &quot;Tehran&quot;\n};\n\nfor (let key in user) {\n  console.log(key + &quot;: &quot; + user[key]);\n}\n</code></pre>\n<ul>\n<li><strong>Key:</strong> Represents the property name (or key) of the object.</li>\n<li>This loop iterates over the properties of the user object and prints each property name and its corresponding value.</li>\n</ul>\n<h2 id=\"the-forof-loop\">The <code>for...of</code> Loop</h2>\n<p>The for...of loop is used to iterate over iterable objects like arrays, strings, and more. It is often preferred over\nthe for loop for arrays because it is simpler and avoids off-by-one errors.</p>\n<pre><code class=\"language-js\">let fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;];\n\n// element\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n</code></pre>\n<ul>\n<li><strong>Element:</strong> Represents the current element in the iterable (e.g., array).</li>\n<li>This loop iterates over the fruits array and prints each fruit name. It is more concise and easier to read than a\ntraditional for loop.</li>\n</ul>\n<h2 id=\"the-foreach-method\">The <code>forEach</code> method</h2>\n<p>The forEach method executes a provided function once for each array element. This method takes a callback function as an\nargument, and this callback function is executed with each element in the array, one at a time.</p>\n<pre><code class=\"language-js\">let fruits = [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;];\n\nfruits.forEach(function(fruit) {\n  console.log(fruit);\n});\n</code></pre>\n<ul>\n<li>The forEach method iterates through the fruits array, and for each element, it calls the provided function, printing\nthe element to the console.</li>\n</ul>\n","markdown":"# Loops in JavaScript\n\nJavaScript provides several types of loops, each with its own use cases. The most commonly used loops are for, while,\nand do...while. Additionally, there are special loops like for...in and for...of for iterating over objects and arrays.\n\n## The `for` Loop\n\nThe for loop is one of the most commonly used loops in JavaScript. It runs a block of code a specific number of times,\nbased on a condition.\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];\n\nfor (let i = 0; i < fruits.length; i++) {\n  console.log(fruits[i]);\n}\n```\n\nThis loop iterates over the fruits array and prints each fruit name.\n\n**Common Use Case:** Iterating Over Arrays\n\n## The `while` Loop\n\nThe while loop runs as long as a specified condition is true. It is useful when the number of iterations is not known\nahead of time.\n\n```js\nlet i = 0;\n\nwhile (i < 5) {\n  console.log(\"Iteration number: \" + i);\n  i++;\n}\n```\n\n* The loop continues running as long as this condition is true\n* This loop behaves similarly to the for loop example above, but here the loop counter i is defined outside the loop and\n  incremented manually inside the loop.\n\n## The `for...in` Loop\n\nThe for...in loop is used to iterate over the properties of an object. It is primarily used for objects rather than\narrays.\n\n```js\nlet user = {\n  name: \"Amir\",\n  city: \"Tehran\"\n};\n\nfor (let key in user) {\n  console.log(key + \": \" + user[key]);\n}\n```\n\n* **Key:** Represents the property name (or key) of the object.\n* This loop iterates over the properties of the user object and prints each property name and its corresponding value.\n\n## The `for...of` Loop\n\nThe for...of loop is used to iterate over iterable objects like arrays, strings, and more. It is often preferred over\nthe for loop for arrays because it is simpler and avoids off-by-one errors.\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];\n\n// element\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n```\n\n* **Element:** Represents the current element in the iterable (e.g., array).\n* This loop iterates over the fruits array and prints each fruit name. It is more concise and easier to read than a\n  traditional for loop.\n\n## The `forEach` method\n\nThe forEach method executes a provided function once for each array element. This method takes a callback function as an\nargument, and this callback function is executed with each element in the array, one at a time.\n\n```js\nlet fruits = ['apple', 'banana', 'orange'];\n\nfruits.forEach(function(fruit) {\n  console.log(fruit);\n});\n```\n\n* The forEach method iterates through the fruits array, and for each element, it calls the provided function, printing\n  the element to the console.\n","slug":"loops","title":"Loops","section":"JavaScript","icon":"wrench","filePath":"/home/runner/work/front-end-for-back-end-engineers/front-end-for-back-end-engineers/lessons/04-JavaScript/F-loops.md","nextSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/conditions","prevSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/functions"}},"__N_SSG":true}