{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"interacting-with-the-dom-document-object-model\">Interacting with the DOM (Document Object Model)</h1>\n<h2 id=\"what-is-the-dom\">What is the DOM?</h2>\n<p>The DOM (Document Object Model) is a programming interface provided by the browser that allows JavaScript to interact\nwith the HTML and CSS of a webpage. It represents the structure of a webpage as a tree of objects, where each element in\nthe HTML document is a node in this tree. This model allows developers to programmatically manipulate web content,\nstyle, and structure.</p>\n<p><strong>Document:</strong> The root of the DOM tree, representing the entire webpage.\n<strong>Elements:</strong> Individual HTML elements (<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>, etc.) are nodes in the DOM.</p>\n<h2 id=\"selecting-elements\">Selecting Elements</h2>\n<p>Before you can manipulate an element, you need to select it from the DOM. JavaScript provides several methods for\nselecting elements, each with its own use cases.</p>\n<p><strong>1. getElementById:</strong>\nThis method selects a single element based on its <code>id</code> attribute. Since IDs are unique within a page, this method\nreturns\none element.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> element = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;element-id&#x27;</span>);\n</code></pre>\n<p><strong>2. getElementsByClassName:</strong>\nThis method selects all elements that share the same class name and returns an HTMLCollection (an array-like object).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Selecting all &lt;p&gt; (paragraph) elements on the page.</span>\n<span class=\"hljs-keyword\">let</span> paragraphs = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&quot;p&quot;</span>);\n</code></pre>\n<p><strong>3. querySelector:</strong>\nThis method selects the first element that matches a CSS selector. Itâ€™s versatile and can select elements based on ID,\nclass, tag name, or any complex CSS selector.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> element = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;selector&#x27;</span>);\n\n<span class=\"hljs-comment\">// Selecting the first element with the class list-item.</span>\n<span class=\"hljs-keyword\">let</span> firstItem = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.list-item&#x27;</span>);\n</code></pre>\n<p><strong>4. querySelectorAll:</strong>\nThis method selects all elements that match a CSS selector and returns a NodeList (a static collection of elements that\ncan be iterated over).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Selecting all elements with the class list-item.</span>\n<span class=\"hljs-keyword\">let</span> allItems = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&#x27;.list-item&#x27;</span>);\n</code></pre>\n<h2 id=\"manipulating-content\">Manipulating Content</h2>\n<p>Once youâ€™ve selected an element, you can manipulate its content, and style.</p>\n<p><strong>a. Changing Text Content:</strong>\nYou can change the text content of an element using the <code>textContent</code>property.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> title = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;main-title&quot;</span>);\ntitle.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;Welcome to My Web Page!&quot;</span>;  <span class=\"hljs-comment\">// Changes the text content</span>\n</code></pre>\n<p>The <code>textContent</code> property sets or returns the text content of the specified element.</p>\n<p><strong>b. Changing HTML Content:</strong>\nYou can change the inner HTML of an element using the <code>innerHTML</code> property.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> content = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;content&#x27;</span>);\ncontent.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&quot;&lt;p&gt;This is a new paragraph!&lt;/p&gt;&quot;</span>;  <span class=\"hljs-comment\">// Changes the HTML content</span>\n</code></pre>\n<p>The <code>innerHTML</code> property allows you to add or modify the HTML inside an element.</p>\n<blockquote>\n<p>ðŸ’¡ You can get the value of these elements like this:</p>\n<ul>\n<li>document.getElementById(&#39;content&#39;).innerHTML</li>\n<li>or</li>\n<li>document.getElementById(&#39;content&#39;).textContent</li>\n</ul>\n</blockquote>\n<p><strong>c. Changing Styles:</strong>\nYou can directly manipulate an elementâ€™s CSS styles using the <code>style</code> property.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> header = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;h1&#x27;</span>);\nheader.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;blue&quot;</span>;    <span class=\"hljs-comment\">// Changes the text color to blue</span>\nheader.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontSize</span> = <span class=\"hljs-string\">&quot;24px&quot;</span>; <span class=\"hljs-comment\">// Changes the font size to 24px</span>\n</code></pre>\n<p>The <code>style</code> property allows you to set or return the inline style of an element.</p>\n<p><strong>D. Getting the Value of an Input Field:</strong>\nFor input fields like text boxes, checkboxes, radio buttons, or select dropdowns, you can use the value property to\nretrieve the current value.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Amir&quot;</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n  <span class=\"hljs-keyword\">let</span> usernameInput = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;username&#x27;</span>);\n  <span class=\"hljs-keyword\">let</span> usernameValue = usernameInput.<span class=\"hljs-property\">value</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(usernameValue);  <span class=\"hljs-comment\">// Output: Amir</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"creating-and-removing-elements\">Creating and Removing Elements</h2>\n<p>JavaScript also allows you to create new elements and add them to the DOM or remove existing elements from the DOM.</p>\n<p><strong>a. Creating New Elements:</strong>\nYou can create a new element using <code>document.createElement</code> and add it to the DOM using a method like <code>appendChild</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> newParagraph = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;p&#x27;</span>);\nnewParagraph.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;This is a dynamically added paragraph.&quot;</span>;\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(newParagraph);  <span class=\"hljs-comment\">// Adds the new paragraph to the end of the body</span>\n</code></pre>\n<p><code>createElement</code> creates a new element, and <code>appendChild</code> adds it to the DOM as the last child of the specified parent\nelement.</p>\n<p><strong>b. Removing Elements:</strong>\nYou can remove an element from the DOM using the removeChild or remove method.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> paragraph = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p&quot;</span>);\nparagraph.<span class=\"hljs-title function_\">remove</span>();  <span class=\"hljs-comment\">// Removes the selected paragraph from the DOM</span>\n</code></pre>\n<p>The <code>remove</code> method removes the selected element from the DOM.</p>\n<h2 id=\"manipulating-classes\">Manipulating Classes</h2>\n<p>Classes are essential for applying CSS styles. JavaScript provides methods to add, remove, and toggle CSS classes on\nelements dynamically.</p>\n<p><strong>a. Adding Classes:</strong>\n<code>classList.add</code> adds the specified class to the element&#39;s class list.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.my-button&#x27;</span>);\nbutton.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">&#x27;active&#x27;</span>);  <span class=\"hljs-comment\">// Adds the &#x27;active&#x27; class to the button</span>\n</code></pre>\n<p><strong>b. Removing Classes:</strong>\n<code>classList.remove</code> removes the specified class from the element&#39;s class list.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.my-button&#x27;</span>);\nbutton.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">&#x27;inactive&#x27;</span>);  <span class=\"hljs-comment\">// Removes the &#x27;inactive&#x27; class from the button</span>\n</code></pre>\n<p><strong>c. Toggling Classes:</strong>\nToggling a class means adding the class if itâ€™s not already present, or removing it if it is.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.my-button&#x27;</span>);\nbutton.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">toggle</span>(<span class=\"hljs-string\">&#x27;highlight&#x27;</span>);  <span class=\"hljs-comment\">// Toggles the &#x27;highlight&#x27; class on the button</span>\n</code></pre>\n<p><code>classList.toggle</code> adds the class if it doesnâ€™t exist, or removes it if it does.</p>\n","markdown":"# Interacting with the DOM (Document Object Model)\n\n## What is the DOM?\n\nThe DOM (Document Object Model) is a programming interface provided by the browser that allows JavaScript to interact\nwith the HTML and CSS of a webpage. It represents the structure of a webpage as a tree of objects, where each element in\nthe HTML document is a node in this tree. This model allows developers to programmatically manipulate web content,\nstyle, and structure.\n\n**Document:** The root of the DOM tree, representing the entire webpage.\n**Elements:** Individual HTML elements (`<div>`, `<p>`, `<h1>`, etc.) are nodes in the DOM.\n\n## Selecting Elements\n\nBefore you can manipulate an element, you need to select it from the DOM. JavaScript provides several methods for\nselecting elements, each with its own use cases.\n\n**1. getElementById:**\nThis method selects a single element based on its `id` attribute. Since IDs are unique within a page, this method\nreturns\none element.\n\n```js\nlet element = document.getElementById('element-id');\n```\n\n**2. getElementsByClassName:**\nThis method selects all elements that share the same class name and returns an HTMLCollection (an array-like object).\n\n```js\n// Selecting all <p> (paragraph) elements on the page.\nlet paragraphs = document.getElementsByTagName(\"p\");\n```\n\n**3. querySelector:**\nThis method selects the first element that matches a CSS selector. Itâ€™s versatile and can select elements based on ID,\nclass, tag name, or any complex CSS selector.\n\n```js\nlet element = document.querySelector('selector');\n\n// Selecting the first element with the class list-item.\nlet firstItem = document.querySelector('.list-item');\n```\n\n**4. querySelectorAll:**\nThis method selects all elements that match a CSS selector and returns a NodeList (a static collection of elements that\ncan be iterated over).\n\n```js\n// Selecting all elements with the class list-item.\nlet allItems = document.querySelectorAll('.list-item');\n```\n\n## Manipulating Content\n\nOnce youâ€™ve selected an element, you can manipulate its content, and style.\n\n**a. Changing Text Content:**\nYou can change the text content of an element using the `textContent`property.\n\n```js\nlet title = document.getElementById(\"main-title\");\ntitle.textContent = \"Welcome to My Web Page!\";  // Changes the text content\n```\n\nThe `textContent` property sets or returns the text content of the specified element.\n\n**b. Changing HTML Content:**\nYou can change the inner HTML of an element using the `innerHTML` property.\n\n```js\nlet content = document.getElementById('content');\ncontent.innerHTML = \"<p>This is a new paragraph!</p>\";  // Changes the HTML content\n```\n\nThe `innerHTML` property allows you to add or modify the HTML inside an element.\n\n\n> ðŸ’¡ You can get the value of these elements like this:\n>* document.getElementById('content').innerHTML\n>* or\n>* document.getElementById('content').textContent\n\n**c. Changing Styles:**\nYou can directly manipulate an elementâ€™s CSS styles using the `style` property.\n\n```js\nlet header = document.querySelector('h1');\nheader.style.color = \"blue\";    // Changes the text color to blue\nheader.style.fontSize = \"24px\"; // Changes the font size to 24px\n```\n\nThe `style` property allows you to set or return the inline style of an element.\n\n**D. Getting the Value of an Input Field:**\nFor input fields like text boxes, checkboxes, radio buttons, or select dropdowns, you can use the value property to\nretrieve the current value.\n\n```html\n<input type=\"text\" id=\"username\" value=\"Amir\">\n\n<script>\n  let usernameInput = document.getElementById('username');\n  let usernameValue = usernameInput.value;\n  console.log(usernameValue);  // Output: Amir\n</script>\n\n```\n\n## Creating and Removing Elements\n\nJavaScript also allows you to create new elements and add them to the DOM or remove existing elements from the DOM.\n\n**a. Creating New Elements:**\nYou can create a new element using `document.createElement` and add it to the DOM using a method like `appendChild`.\n\n```js\nlet newParagraph = document.createElement('p');\nnewParagraph.textContent = \"This is a dynamically added paragraph.\";\ndocument.body.appendChild(newParagraph);  // Adds the new paragraph to the end of the body\n```\n\n`createElement` creates a new element, and `appendChild` adds it to the DOM as the last child of the specified parent\nelement.\n\n**b. Removing Elements:**\nYou can remove an element from the DOM using the removeChild or remove method.\n\n```js\nlet paragraph = document.querySelector(\"p\");\nparagraph.remove();  // Removes the selected paragraph from the DOM\n```\n\nThe `remove` method removes the selected element from the DOM.\n\n## Manipulating Classes\n\nClasses are essential for applying CSS styles. JavaScript provides methods to add, remove, and toggle CSS classes on\nelements dynamically.\n\n**a. Adding Classes:**\n`classList.add` adds the specified class to the element's class list.\n\n```js\nlet button = document.querySelector('.my-button');\nbutton.classList.add('active');  // Adds the 'active' class to the button\n```\n\n**b. Removing Classes:**\n`classList.remove` removes the specified class from the element's class list.\n\n```js\nlet button = document.querySelector('.my-button');\nbutton.classList.remove('inactive');  // Removes the 'inactive' class from the button\n```\n\n**c. Toggling Classes:**\nToggling a class means adding the class if itâ€™s not already present, or removing it if it is.\n\n```js\nlet button = document.querySelector('.my-button');\nbutton.classList.toggle('highlight');  // Toggles the 'highlight' class on the button\n```\n\n`classList.toggle` adds the class if it doesnâ€™t exist, or removes it if it does.\n","slug":"interacting-with-the-dom","title":"Interacting with the Dom","section":"JavaScript","icon":"wrench","filePath":"/home/runner/work/front-end-for-back-end-engineers/front-end-for-back-end-engineers/lessons/04-JavaScript/H-interacting-with-the-dom.md","nextSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/event-handling","prevSlug":"/front-end-for-back-end-engineers/lessons/JavaScript/conditions"}},"__N_SSG":true}